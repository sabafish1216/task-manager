{"ast":null,"code":"// 16進数カラーコードをRGB値に変換\nexport const hexToRgb = hex => {\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result ? {\n    r: parseInt(result[1], 16),\n    g: parseInt(result[2], 16),\n    b: parseInt(result[3], 16)\n  } : {\n    r: 0,\n    g: 0,\n    b: 0\n  };\n};\n\n// 2つのRGB値のユークリッド距離を計算\nexport const calculateColorDistance = (color1, color2) => {\n  const dr = color1.r - color2.r;\n  const dg = color1.g - color2.g;\n  const db = color1.b - color2.b;\n  return Math.sqrt(dr * dr + dg * dg + db * db);\n};\n\n// 類似色かどうかを判定（閾値: 80）\nexport const isSimilarColor = (color1, color2, threshold = 80) => {\n  const rgb1 = hexToRgb(color1);\n  const rgb2 = hexToRgb(color2);\n  const distance = calculateColorDistance(rgb1, rgb2);\n  return distance <= threshold;\n};\n\n// 既存の色リストから類似色を検索\nexport const findSimilarColors = (newColor, existingColors, threshold = 50) => {\n  return existingColors.filter(existingColor => isSimilarColor(newColor, existingColor, threshold));\n};","map":{"version":3,"names":["hexToRgb","hex","result","exec","r","parseInt","g","b","calculateColorDistance","color1","color2","dr","dg","db","Math","sqrt","isSimilarColor","threshold","rgb1","rgb2","distance","findSimilarColors","newColor","existingColors","filter","existingColor"],"sources":["/Users/sabafish1028/Programs/Hobby/task-manager/src/utils/colorUtils.ts"],"sourcesContent":["// 16進数カラーコードをRGB値に変換\nexport const hexToRgb = (hex: string): { r: number; g: number; b: number } => {\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result ? {\n    r: parseInt(result[1], 16),\n    g: parseInt(result[2], 16),\n    b: parseInt(result[3], 16)\n  } : { r: 0, g: 0, b: 0 };\n};\n\n// 2つのRGB値のユークリッド距離を計算\nexport const calculateColorDistance = (\n  color1: { r: number; g: number; b: number },\n  color2: { r: number; g: number; b: number }\n): number => {\n  const dr = color1.r - color2.r;\n  const dg = color1.g - color2.g;\n  const db = color1.b - color2.b;\n  return Math.sqrt(dr * dr + dg * dg + db * db);\n};\n\n// 類似色かどうかを判定（閾値: 80）\nexport const isSimilarColor = (color1: string, color2: string, threshold: number = 80): boolean => {\n  const rgb1 = hexToRgb(color1);\n  const rgb2 = hexToRgb(color2);\n  const distance = calculateColorDistance(rgb1, rgb2);\n  return distance <= threshold;\n};\n\n// 既存の色リストから類似色を検索\nexport const findSimilarColors = (\n  newColor: string,\n  existingColors: string[],\n  threshold: number = 50\n): string[] => {\n  return existingColors.filter(existingColor => \n    isSimilarColor(newColor, existingColor, threshold)\n  );\n}; "],"mappings":"AAAA;AACA,OAAO,MAAMA,QAAQ,GAAIC,GAAW,IAA0C;EAC5E,MAAMC,MAAM,GAAG,2CAA2C,CAACC,IAAI,CAACF,GAAG,CAAC;EACpE,OAAOC,MAAM,GAAG;IACdE,CAAC,EAAEC,QAAQ,CAACH,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;IAC1BI,CAAC,EAAED,QAAQ,CAACH,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;IAC1BK,CAAC,EAAEF,QAAQ,CAACH,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE;EAC3B,CAAC,GAAG;IAAEE,CAAC,EAAE,CAAC;IAAEE,CAAC,EAAE,CAAC;IAAEC,CAAC,EAAE;EAAE,CAAC;AAC1B,CAAC;;AAED;AACA,OAAO,MAAMC,sBAAsB,GAAGA,CACpCC,MAA2C,EAC3CC,MAA2C,KAChC;EACX,MAAMC,EAAE,GAAGF,MAAM,CAACL,CAAC,GAAGM,MAAM,CAACN,CAAC;EAC9B,MAAMQ,EAAE,GAAGH,MAAM,CAACH,CAAC,GAAGI,MAAM,CAACJ,CAAC;EAC9B,MAAMO,EAAE,GAAGJ,MAAM,CAACF,CAAC,GAAGG,MAAM,CAACH,CAAC;EAC9B,OAAOO,IAAI,CAACC,IAAI,CAACJ,EAAE,GAAGA,EAAE,GAAGC,EAAE,GAAGA,EAAE,GAAGC,EAAE,GAAGA,EAAE,CAAC;AAC/C,CAAC;;AAED;AACA,OAAO,MAAMG,cAAc,GAAGA,CAACP,MAAc,EAAEC,MAAc,EAAEO,SAAiB,GAAG,EAAE,KAAc;EACjG,MAAMC,IAAI,GAAGlB,QAAQ,CAACS,MAAM,CAAC;EAC7B,MAAMU,IAAI,GAAGnB,QAAQ,CAACU,MAAM,CAAC;EAC7B,MAAMU,QAAQ,GAAGZ,sBAAsB,CAACU,IAAI,EAAEC,IAAI,CAAC;EACnD,OAAOC,QAAQ,IAAIH,SAAS;AAC9B,CAAC;;AAED;AACA,OAAO,MAAMI,iBAAiB,GAAGA,CAC/BC,QAAgB,EAChBC,cAAwB,EACxBN,SAAiB,GAAG,EAAE,KACT;EACb,OAAOM,cAAc,CAACC,MAAM,CAACC,aAAa,IACxCT,cAAc,CAACM,QAAQ,EAAEG,aAAa,EAAER,SAAS,CACnD,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}